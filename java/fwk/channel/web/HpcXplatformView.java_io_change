package fwk.channel.web;

import java.math.BigDecimal;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletResponse;

import nexcore.framework.core.ServiceConstants;
import nexcore.framework.core.component.IBizComponentMetaDataRegistry;
import nexcore.framework.core.component.IMethodMetaData;
import nexcore.framework.core.component.internal.DataSetMetaData;
import nexcore.framework.core.component.internal.FieldMetaData;
import nexcore.framework.core.component.internal.RecordSetMetaData;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.data.IRecordHeader;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.IResultMessage;
import nexcore.framework.core.data.ITransaction;
import nexcore.framework.core.data.ResultMessage;
import nexcore.framework.core.data.user.IUserInfo;
import nexcore.framework.core.exception.SystemRuntimeException;
import nexcore.framework.core.ioc.ComponentRegistry;
import nexcore.framework.core.log.LogManager;
import nexcore.framework.core.message.IMessage;
import nexcore.framework.core.message.IMessageManager;
import nexcore.framework.core.service.front.DefaultFrontDataLog;
import nexcore.framework.online.channel.core.IRequestContext;
import nexcore.framework.online.channel.core.IResponseContext;
import nexcore.framework.online.channel.core.RenderException;
import nexcore.framework.online.channel.web.XPlatformView;

import org.apache.commons.logging.Log;

import com.tobesoft.xplatform.data.DataTypes;
import com.tobesoft.xplatform.data.PlatformData;
import com.tobesoft.xplatform.data.VariableList;
import com.tobesoft.xplatform.tx.HttpPlatformResponse;
import com.tobesoft.xplatform.tx.PlatformException;
import com.tobesoft.xplatform.tx.PlatformType;

import fwk.channel.XplatformHeaderSpec;
import fwk.common.CommonArea;
import fwk.common.CommonUtils;
import fwk.utils.HpcUtils;
import fwk.utils.PagenateUtils;

/**
 * NEXCORE에서 제공하는 View인 XplatformView와 큰 차이는 없으나 
 * Xplatform용으로 데이터 전환하는 부분을 메소드로 분리하고 
 * 기타 AMS용 파라미터를 함께 넣어주기 위해 상속받아 처리함. 
 * @author 박세일
 *
 */
public class HpcXplatformView extends XPlatformView {

	private Log logger = LogManager.getFwkLog();
	private DefaultFrontDataLog frontDataLog;
	private IBizComponentMetaDataRegistry   cmdRegistry;
	
	public void setFrontDataLog(DefaultFrontDataLog frontDataLog) {
		this.frontDataLog = frontDataLog;
	}
	
   public IBizComponentMetaDataRegistry getCmdRegistry() {
        if(cmdRegistry == null) {
            cmdRegistry =  (IBizComponentMetaDataRegistry)ComponentRegistry.lookup("nc.core.IBizComponentMetaDataRegistry");
        }
        return cmdRegistry;
    }
	
	@Override
	public void render(IRequestContext requestCtx, IResponseContext responseCtx) throws RenderException {
		
		HttpServletResponse httpResp = (HttpServletResponse)responseCtx.getWriteProtocol();
		IDataSet resp = (IDataSet)responseCtx.getBizData();
		ITransaction tr = requestCtx.getOnlineContext().getTransaction();
		IOnlineContext onlineCtx = responseCtx.getOnlineContext();
		IUserInfo userInfo = (IUserInfo)onlineCtx.getUserInfo();
		PlatformData xpData = new PlatformData();
		VariableList xpVars = xpData.getVariableList();
		HttpPlatformResponse xpResp = null;// request 의 타입을 판단하기 위해서 사용. (XML, BINARY, BINARY COMPRESS)
		try{
            // BINARY, XML 여부에 따라서 Response 를 생성한다.
            if(PlatformType.CONTENT_TYPE_BINARY.equals(requestCtx.getOnlineContext().getAttribute("CONTENT_TYPE"))) {  // BINARY Response 생성 
                xpResp = new HttpPlatformResponse(httpResp, PlatformType.CONTENT_TYPE_BINARY, PlatformType.DEFAULT_CHAR_SET);
            } else {// XML Response 생성
                xpResp = new HttpPlatformResponse(httpResp, PlatformType.CONTENT_TYPE_XML, PlatformType.DEFAULT_CHAR_SET);
            }
            // COMPRESS Protocol Type을 추가한다.
            if(PlatformType.PROTOCOL_TYPE_ZLIB.equals(requestCtx.getOnlineContext().getAttribute("PROTOCOL_TYPE"))) {// BINARY Response 생성
                xpResp.addProtocolType(PlatformType.PROTOCOL_TYPE_ZLIB);
            } 
	        //CommonArea에 저장되어 있는 연동정보를 Xplatform VariableList에 담는다
	        convertHeaderToXpfVariableList(onlineCtx, xpVars);//sets form variables
	        
	        IResultMessage resultMsg = (IResultMessage)(resp.getResultMessage());
	        if(resultMsg == null){
	            resultMsg = new ResultMessage(IResultMessage.FAIL, 
	                    "No message is set in the response dataset from server.", null);
	        }
	        
	        //@fixme the following code should be enhanced to use dependency injection.
	        IMessageManager msgMgr = (IMessageManager)(ComponentRegistry.lookup(ServiceConstants.MESSAGE));
	        IMessage msg = msgMgr.getMessage(resultMsg.getMessageId(), requestCtx.getOnlineContext().getUserInfo().getLocale());
	        String msgStr = msg.getName(resultMsg.getMessageParams());
	        
	        xpVars.add(this.getMsgIdVarName(), resultMsg.getMessageId());
	        xpVars.add(this.getMsgVarName(), msgStr);
	        
	        //DataSet을 XPlatform parameter 양식으로 변환함.
	        if(resultMsg.getStatus() == IResultMessage.OK){
	            xpVars.add(this.getMsgFlagVarName(), "OK");
	            xpVars.add(ERR_CODE_VARIABLE_NAME, "0");
	            xpVars.add(ERR_MSG_VARIABLE_NAME, "OK");
	            convertDataSetToXplatformDs(resp, xpData, onlineCtx);
	        } else{ // in case of failure at server application
	            xpVars.add(this.getMsgFlagVarName(), "ERROR");
	            xpVars.add(ERR_CODE_VARIABLE_NAME, "-1");
	            xpVars.add(ERR_MSG_VARIABLE_NAME, "ERROR");
	        }
						
			xpResp.setData(xpData);
			xpResp.sendData();
		}catch(Exception ex){
		    if(ex instanceof RuntimeException) {
		        xpVars.add(this.getMsgIdVarName(), "SKFE5009");
	            xpVars.add(this.getMsgVarName(), ex.getMessage());
		        xpVars.add(this.getMsgFlagVarName(), "ERROR");
	            xpVars.add(ERR_CODE_VARIABLE_NAME, "-1");
	            xpVars.add(ERR_MSG_VARIABLE_NAME, "ERROR");
	            xpResp.setData(xpData);
	            try {
                    xpResp.sendData();
                } catch (PlatformException e) {
                    logger.error("Exception at writing and sending response data", ex);
                    throw new RenderException("SKFS1011", new String[] {ex.getLocalizedMessage()}, ex);
                }
		    } else {
		        logger.error("Exception at writing and sending response data", ex);
	            throw new RenderException("SKFS1011", new String[] {ex.getLocalizedMessage()}, ex);
		    }
            
			
		}
	}
	
	/**
	 * DataSet을 XPlatform 양식으로 변환하기 위한 작업을 실시.
	 * @param resultMsg
	 * @param resp
	 * @param xpData
	 * @param xpVars
	 */
	protected void convertDataSetToXplatformDs(IDataSet resp, PlatformData xpData, IOnlineContext onlineCtx) {
		Set keys = null;
		String txId = onlineCtx.getTransaction().getTxId();
		String globId = CommonUtils.getCommonArea(onlineCtx).getGlobId();
		IMethodMetaData mmd = getCmdRegistry().getMethodMetaData(txId);
		if (mmd == null) {
            // 트랜잭션 아이디 {0} 에 해당하는 메소드 메타데이터가 존재하지 않습니다.
            throw new SystemRuntimeException("SKFE4011", new String[]{txId});
        }
		
		DataSetMetaData ioMetaData = (DataSetMetaData)mmd.getOutputIoMetaData();//PM의 output IO메타정보취득
		List fmdList = ioMetaData.getFieldMetaDataList(); 
		if(fmdList != null && fmdList.size()==0 ) fmdList = ioMetaData.getFlMetaDataList();//일반 필드정의가 없을 경우에는 전문IO필드정의가 있는지 확인.
		List rsFmdList = ioMetaData.getRecordSetMetaDataList();
		
		Map fields = resp.getFieldMap();//convert field-map.
		Object obj = null;
		FieldMetaData  fmd= null;
		String key = "";//UI로 response할 파라미터의 key
		Object value = null; //UI로 response할 파라미터의 value
		byte []byteArrClass = {0x00};
		String blobName = byteArrClass.getClass().getName();
		com.tobesoft.xplatform.data.DataSet xpDataset = null;
		try {
		    //필드타입을 UI의 Dataset으로 변환
		    if(fmdList !=null && fmdList.size() > 0) {
		        xpDataset = new com.tobesoft.xplatform.data.DataSet(this.getLinearDatasetName());
	            for(int i=0; i<fmdList.size(); i++) {
	                obj = fmdList.get(i);
	                if(obj instanceof FieldMetaData) {
	                    fmd = (FieldMetaData)obj;
	                    key = HpcUtils.chngUppStrToCamelStr(fmd.getId());//UI로 response할때는 camel 명명규칙으로 변환한다.
	                    xpDataset.addColumn(key, getDataType(fmd));
	                }
	            }
	            
	            int no = xpDataset.newRow();//컬럼 생성 전에 row를 생성할 수 없기 때문에 컬럼생성과 row 설정을 분리함.  
	            for(int i=0; i<fmdList.size(); i++) {
	                obj = fmdList.get(i);
                    if(obj instanceof FieldMetaData) {
                        fmd = (FieldMetaData)obj;
                        key = HpcUtils.chngUppStrToCamelStr(fmd.getId());//UI로 response할때는 camel 명명규칙으로 변환한다.
                        value = fields.get(fmd.getId());
                        setValue(fmd, xpDataset, value, no);
                    }
	            }
	            xpData.addDataSet(xpDataset);
	        }
		    
		    //RecordSet을 UI의 Dataset으로 변환
		    RecordSetMetaData rmd = null;
		    List rmdFmdList = null;
		    IRecordSet rs = null;
		    if(rsFmdList != null && rsFmdList.size() > 0) {
		        for(int i=0; i<rsFmdList.size(); i++) {//IRecordSet이 여러 개 일 경우
		            obj = rsFmdList.get(i);
		            if(obj instanceof RecordSetMetaData) {
		                rmd = (RecordSetMetaData)obj;
		                xpDataset = new com.tobesoft.xplatform.data.DataSet(HpcUtils.chngUppStrToCamelStr(rmd.getId()));
		                rmdFmdList = rmd.getFieldMetaDataList();
		                rs = resp.getRecordSet(rmd.getId());//IRecordSet추출
		                for(int j=0; j<rmdFmdList.size(); j++) {
		                    obj = rmdFmdList.get(j);
		                    if(obj instanceof FieldMetaData) {
		                        fmd = (FieldMetaData)obj;
		                        key = HpcUtils.chngUppStrToCamelStr(fmd.getId());
		                        xpDataset.addColumn(key, getDataType(fmd));
		                    }
		                }
		                
		                IRecord record = null;
		              //return 되는 DataSet에서 출력IO에 정의된 RecordSet ID로 get하는 것이기 때문에 IO에는 정의되었으나, 
  	                  //실제RecordSet이 없을 때는 NullPointException발생이 가능함.
		                if(rs !=null) { 
    		                for(int no = 0; no < rs.getRecordCount();no++){ //for each record
    		                    int xpRowNo = xpDataset.newRow();//컬럼 생성 전에 row를 생성할 수 없기 때문에 컬럼생성과 row 설정을 분리함.  
    		                    record = rs.getRecord(no);
    		                    for(int j=0; j<rmdFmdList.size(); j++) {
    	                            obj = rmdFmdList.get(j);
    	                            if(obj instanceof FieldMetaData) {
    	                                fmd = (FieldMetaData)obj;
    	                                value = record.get(fmd.getId());
    	                                setValue(fmd, xpDataset, value, xpRowNo);
    	                            }
    	                        }
    		                }
    		                if(rs.getTotalRecordCount()!= 0 && rs.getPageNo()>=1 ) {
//    		                    xpDataset.set(0, PagenateUtils.PAGE_NO, recordSet.getPageNo());
//    		                    xpDataset.set(0, PagenateUtils.RC_COUNT_PER_PAGE, recordSet.getRecordCountPerPage());
//    		                    xpDataset.set(0, PagenateUtils.TOT_RCD_CNT, recordSet.getTotalRecordCount());
    		                            /**
    		                             * 심상준과장의 요청에 따라 grid type의 return아닌 Argument type의 return이 되도록 변경함. 2014.08.20 by PSI
    		                             * 아래의 내용은 RecordSet일 경우에만 취득되므로 별도 Method로 빼지 않고 해당 메소드에서 처리함.   
    		                             */
	                            xpData.getVariableList().add(PagenateUtils.PAGE_NO, rs.getPageNo());
	                            xpData.getVariableList().add(PagenateUtils.RC_COUNT_PER_PAGE, rs.getRecordCountPerPage());
	                            xpData.getVariableList().add(PagenateUtils.TOT_RCD_CNT, rs.getTotalRecordCount());//Xplatform Argument에도 전체건수 입력
		                    } else {
		                        xpData.getVariableList().add(PagenateUtils.TOT_RCD_CNT, 0);//Xplatform Argument에도 전체건수 입력
		                    }
		                }
		            }
		            
		            xpData.addDataSet(xpDataset);
		        }
		    }
		} catch (Exception e) {
		    if (logger.isErrorEnabled()) {
                logger.error("[" + globId  + "] ["+ txId + "] Exception on parsing request data.", e);
            }
		    throw new RuntimeException("SKFE5009", e);
		}
	}
	
	/**
	 * CommonArea에 담겨 있는 거래정보를 VariableList에 담는다. 
	 * @param onlineCtx
	 * @param xpVars
	 */
	protected void convertHeaderToXpfVariableList(IOnlineContext onlineCtx, VariableList xpVars) {
		CommonArea ca = CommonUtils.getCommonArea(onlineCtx);
		ITransaction tr = onlineCtx.getTransaction();
		xpVars.add(this.getTrIdVarName(), tr.getTxId());
		xpVars.add(this.getStartDateVarName(), tr.getStartTime());
		xpVars.add(this.getEndDateVarName(), tr.getEndTime());
		xpVars.add(XplatformHeaderSpec.GLOB_ID.xpfName(), ca.getGlobId());
		xpVars.add(XplatformHeaderSpec.IPAD.xpfName(), ca.getIpad());
		xpVars.add(XplatformHeaderSpec.PRCM_MAC.xpfName(), ca.getPrcmMac());
		xpVars.add(XplatformHeaderSpec.TRN_TRNM_NO.xpfName(), ca.getTrnTrnmNo());
		xpVars.add(XplatformHeaderSpec.SSO_SESN_KEY.xpfName(), ca.getSsoSesnKey());
		xpVars.add(XplatformHeaderSpec.ENV_DVCD.xpfName(), ca.getEnvDvcd());
		xpVars.add(XplatformHeaderSpec.MESG_VRSN_DVCD.xpfName(), ca.getMesgVrsnDvcd());
		xpVars.add(XplatformHeaderSpec.SCRN_NO.xpfName(), ca.getScrnNo());
		xpVars.add(XplatformHeaderSpec.TRN_PTRN_DVCD.xpfName(), ca.getTrnPtrnDvcd());
		xpVars.add(XplatformHeaderSpec.COMP_CD.xpfName(), ca.getCompCd());
		xpVars.add(XplatformHeaderSpec.DEPT_CD.xpfName(), ca.getDeptCd());
		xpVars.add(XplatformHeaderSpec.BR_CD.xpfName(), ca.getBrCd());
		xpVars.add(XplatformHeaderSpec.USER_NO.xpfName(), ca.getUserNo());
		xpVars.add(XplatformHeaderSpec.USER_LOCALE.xpfName(), ca.getUserLocale());
		xpVars.add(XplatformHeaderSpec.CTI_YN.xpfName(), ca.getCtiYn());
	}
	
	private int getDataType(FieldMetaData fmd) {
	    if(null != fmd.getType()) {
	        if(!FieldMetaData.TYPE_BYTEARRAY.equalsIgnoreCase(fmd.getType())){
	            if (FieldMetaData.TYPE_BIGDECIMAL.equalsIgnoreCase(fmd.getType())) {
	                return DataTypes.BIG_DECIMAL;
	            }  else if (FieldMetaData.TYPE_STRING.equalsIgnoreCase(fmd.getType())) {
	                return DataTypes.STRING;
	            }  else if (FieldMetaData.TYPE_SHORT.equals(fmd.getType())) {
	                return DataTypes.STRING;
	            } else if (FieldMetaData.TYPE_INT.equals(fmd.getType())) {
	                return DataTypes.INT;
	            } else if (FieldMetaData.TYPE_LONG.equals(fmd.getType())) {
	                return DataTypes.LONG;
	            } else if (FieldMetaData.TYPE_DOUBLE.equals(fmd.getType())) {
	                return DataTypes.DOUBLE;
	            } else if (FieldMetaData.TYPE_FLOAT.equals(fmd.getType())) {
	                return DataTypes.FLOAT;
	            } else {
	                throw new RuntimeException("field's type incorrect. " + "[id="+ fmd.getId() + ", type=" + fmd.getType() + "]"); 
	            }
	        } else {
	            return  DataTypes.BLOB;
	        }
	    }
	    return DataTypes.STRING; 
	}
	
	private  void setValue(FieldMetaData fmd, com.tobesoft.xplatform.data.DataSet xpDataset, Object value, int rowNo) {
	    String key = HpcUtils.chngUppStrToCamelStr(fmd.getId());//UI로 response할때는 camel 명명규칙으로 변환한다.
	    switch (getDataType(fmd)) {
            case DataTypes.BIG_DECIMAL:
                xpDataset.set(rowNo, key, (BigDecimal)value);
                break;
            case DataTypes.STRING:
                xpDataset.set(rowNo, key, value);//Data type정의되지 않은 경우에도 String으로 넘어오기 때문에 별도의 형변환하지 않음.
                break;    
            case DataTypes.INT:
                xpDataset.set(rowNo, key, ((Integer)value).intValue());
                break;
            case DataTypes.LONG:
                xpDataset.set(rowNo, key, ((Long)value).longValue());
                break;    
            case DataTypes.FLOAT:
                xpDataset.set(rowNo, key, ((Float)value).floatValue());
                break;    
            case DataTypes.DOUBLE:
                xpDataset.set(rowNo, key, ((Double)value).doubleValue());
                break;
            case DataTypes.BLOB:
                xpDataset.set(rowNo, (String)key, (byte[])value);
                break;
            default:
                break;
        }
	}
}
